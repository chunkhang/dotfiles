#
# weechat -- trigger.conf
#
# WARNING: It is NOT recommended to edit this file by hand,
# especially if WeeChat is running.
#
# Use /set or similar command to change settings in WeeChat.
#
# For more info, see: https://weechat.org/doc/quickstart
#

[look]
enabled = on
monitor_strip_colors = off

[color]
flag_command = lightgreen
flag_conditions = yellow
flag_post_action = lightblue
flag_regex = lightcyan
flag_return_code = lightmagenta
regex = white
replace = cyan
trigger = green
trigger_disabled = red

[trigger]
beep.arguments = ""
beep.command = "/exec -bg afplay /System/Library/Sounds/Frog.aiff"
beep.conditions = "${tg_displayed} && (${tg_highlight} || ${tg_msg_pv})"
beep.enabled = off
beep.hook = print
beep.post_action = none
beep.regex = ""
beep.return_code = ok
censor_words.arguments = "input_text_for_buffer"
censor_words.command = ""
censor_words.conditions = "${server} == pickupp"
censor_words.enabled = on
censor_words.hook = modifier
censor_words.post_action = none
censor_words.regex = "/fuck/f*ck/ /bitch/b*tch/"
censor_words.return_code = ok
cmd_pass.arguments = "5000|input_text_display;5000|history_add;5000|irc_command_auth"
cmd_pass.command = ""
cmd_pass.conditions = ""
cmd_pass.enabled = on
cmd_pass.hook = modifier
cmd_pass.post_action = none
cmd_pass.regex = "==^((/(msg|m|quote) +(-server +[^ ]+ +)?nickserv +(id|identify|set +password|ghost +[^ ]+|release +[^ ]+|regain +[^ ]+|recover +[^ ]+) +)|/oper +[^ ]+ +|/quote +pass +|/set +[^ ]*password[^ ]* +|/secure +(passphrase|decrypt|set +[^ ]+) +)(.*)==${re:1}${hide:*,${re:+}}"
cmd_pass.return_code = ok
cmd_pass_register.arguments = "5000|input_text_display;5000|history_add;5000|irc_command_auth"
cmd_pass_register.command = ""
cmd_pass_register.conditions = ""
cmd_pass_register.enabled = on
cmd_pass_register.hook = modifier
cmd_pass_register.post_action = none
cmd_pass_register.regex = "==^(/(msg|m|quote) +nickserv +register +)([^ ]+)(.*)==${re:1}${hide:*,${re:3}}${re:4}"
cmd_pass_register.return_code = ok
fix_focus.arguments = "quit"
fix_focus.command = "/print -stdout \033[?1004l\n"
fix_focus.conditions = ""
fix_focus.enabled = on
fix_focus.hook = signal
fix_focus.post_action = none
fix_focus.regex = ""
fix_focus.return_code = ok
msg_auth.arguments = "5000|irc_message_auth"
msg_auth.command = ""
msg_auth.conditions = ""
msg_auth.enabled = on
msg_auth.hook = modifier
msg_auth.post_action = none
msg_auth.regex = "==^(.*(id|identify|set +password|register|ghost +[^ ]+|release +[^ ]+|regain +[^ ]+|recover +[^ ]+) +)(.*)==${re:1}${hide:*,${re:+}}"
msg_auth.return_code = ok
server_pass.arguments = "5000|input_text_display;5000|history_add"
server_pass.command = ""
server_pass.conditions = ""
server_pass.enabled = on
server_pass.hook = modifier
server_pass.post_action = none
server_pass.regex = "==^(/(server|connect) .*-(sasl_)?password=)([^ ]+)(.*)==${re:1}${hide:*,${re:4}}${re:5}"
server_pass.return_code = ok
slack_bitbucket.arguments = "weechat_print"
slack_bitbucket.command = ""
slack_bitbucket.conditions = "${server} == pickupp && ${channel} == #bitbucket && (${tg_tag_nick} == Bitbucket_Cloud || ${tg_tag_nick} == Bitbucket || ${tg_tag_nick} == Pipelines)"
slack_bitbucket.enabled = on
slack_bitbucket.hook = modifier
slack_bitbucket.post_action = none
slack_bitbucket.regex = "/`https?:[^(]*\(([^)]*)\)`/${color:red}${re:1}${color:default}/ /https?:[^(]*\((@[^)]*)\)/${re:1}/ /https?:[^(]*\(([^(]*)\)/${color:blue}${re:1}${color:default}/ /:[^:]*: // /\*([^*]*)\*/${re:1}/ /(successful)/${color:green}${re:1}${color:default}/ /(failed)/${color:red}${re:1}${color:default}/"
slack_bitbucket.return_code = ok
slack_circleci.arguments = "weechat_print"
slack_circleci.command = ""
slack_circleci.conditions = "${server} == pickupp && ${channel} == #tech-notifications && ${tg_tag_nick} == circleci"
slack_circleci.enabled = on
slack_circleci.hook = modifier
slack_circleci.post_action = none
slack_circleci.regex = "/https?:[^(]*\(([^)]*)\)/${color:blue}${re:1}${color:default}/ /(Success):/${color:green}${re:1}${color:default}:/ /(Failed):/${color:red}${re:1}${color:default}:/"
slack_circleci.return_code = ok
slack_mail.arguments = "weechat_print"
slack_mail.command = ""
slack_mail.conditions = "${server} == pickupp"
slack_mail.enabled = on
slack_mail.hook = modifier
slack_mail.post_action = none
slack_mail.regex = "/mailto:[^(]* \(([^)]*)\)/${re:1}/"
slack_mail.return_code = ok
slack_marcus.arguments = "weechat_print"
slack_marcus.command = ""
slack_marcus.conditions = "${server} == pickupp && ${channel} == marcus"
slack_marcus.enabled = on
slack_marcus.hook = modifier
slack_marcus.post_action = none
slack_marcus.regex = "/# (.*)/# ${color:green}${re:1}${color:default}/ /- (.*)/- ${color:blue}${re:1}${color:default}/"
slack_marcus.return_code = ok
slack_papertrail.arguments = "weechat_print"
slack_papertrail.command = ""
slack_papertrail.conditions = "${server} == pickupp && (${channel} == #tech-notifications || ${channel} == #engineers-prod-logs) && ${tg_tag_nick} == papertrail"
slack_papertrail.enabled = on
slack_papertrail.hook = modifier
slack_papertrail.post_action = none
slack_papertrail.regex = "/https?:[^(]*\(([^)]*)\)/${color:blue}${re:1}${color:default}/ /"(.*)" search/${color:brown}${re:1}${color:default}/"
slack_papertrail.return_code = ok
