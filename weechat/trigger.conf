#
# weechat -- trigger.conf
#
# WARNING: It is NOT recommended to edit this file by hand,
# especially if WeeChat is running.
#
# Use /set or similar command to change settings in WeeChat.
#
# For more info, see: https://weechat.org/doc/quickstart
#

[look]
enabled = on
monitor_strip_colors = off

[color]
flag_command = lightgreen
flag_conditions = yellow
flag_post_action = lightblue
flag_regex = lightcyan
flag_return_code = lightmagenta
regex = white
replace = cyan
trigger = green
trigger_disabled = red

[trigger]
beep.arguments = ""
beep.command = "/exec -bg afplay /System/Library/Sounds/Frog.aiff"
beep.conditions = "${tg_displayed} && (${tg_highlight} || ${tg_msg_pv})"
beep.enabled = off
beep.hook = print
beep.post_action = none
beep.regex = ""
beep.return_code = ok
cmd_pass.arguments = "5000|input_text_display;5000|history_add;5000|irc_command_auth"
cmd_pass.command = ""
cmd_pass.conditions = ""
cmd_pass.enabled = on
cmd_pass.hook = modifier
cmd_pass.post_action = none
cmd_pass.regex = "==^((/(msg|m|quote) +(-server +[^ ]+ +)?nickserv +(id|identify|set +password|ghost +[^ ]+|release +[^ ]+|regain +[^ ]+|recover +[^ ]+) +)|/oper +[^ ]+ +|/quote +pass +|/set +[^ ]*password[^ ]* +|/secure +(passphrase|decrypt|set +[^ ]+) +)(.*)==${re:1}${hide:*,${re:+}}"
cmd_pass.return_code = ok
cmd_pass_register.arguments = "5000|input_text_display;5000|history_add;5000|irc_command_auth"
cmd_pass_register.command = ""
cmd_pass_register.conditions = ""
cmd_pass_register.enabled = on
cmd_pass_register.hook = modifier
cmd_pass_register.post_action = none
cmd_pass_register.regex = "==^(/(msg|m|quote) +nickserv +register +)([^ ]+)(.*)==${re:1}${hide:*,${re:3}}${re:4}"
cmd_pass_register.return_code = ok
fix_focus.arguments = "quit"
fix_focus.command = "/print -stdout \033[?1004l\n"
fix_focus.conditions = ""
fix_focus.enabled = on
fix_focus.hook = signal
fix_focus.post_action = none
fix_focus.regex = ""
fix_focus.return_code = ok
msg_auth.arguments = "5000|irc_message_auth"
msg_auth.command = ""
msg_auth.conditions = ""
msg_auth.enabled = on
msg_auth.hook = modifier
msg_auth.post_action = none
msg_auth.regex = "==^(.*(id|identify|set +password|register|ghost +[^ ]+|release +[^ ]+|regain +[^ ]+|recover +[^ ]+) +)(.*)==${re:1}${hide:*,${re:+}}"
msg_auth.return_code = ok
server_pass.arguments = "5000|input_text_display;5000|history_add"
server_pass.command = ""
server_pass.conditions = ""
server_pass.enabled = on
server_pass.hook = modifier
server_pass.post_action = none
server_pass.regex = "==^(/(server|connect) .*-(sasl_)?password=)([^ ]+)(.*)==${re:1}${hide:*,${re:4}}${re:5}"
server_pass.return_code = ok
slack_circleci.arguments = "weechat_print"
slack_circleci.command = ""
slack_circleci.conditions = "${server} == omnilytics && ${tg_tag_nick} == circleci"
slack_circleci.enabled = on
slack_circleci.hook = modifier
slack_circleci.post_action = none
slack_circleci.regex = "/https?:[^(]*\(([^)]*)\)/${color:blue}${re:1}${color:default}/ /(Success):/${color:green}${re:1}${color:default}:/ /(Failed):/${color:red}${re:1}${color:default}:/"
slack_circleci.return_code = ok
slack_github.arguments = "weechat_print"
slack_github.command = ""
slack_github.conditions = "${server} == omnilytics && ${tg_tag_nick} == GitHub"
slack_github.enabled = on
slack_github.hook = modifier
slack_github.post_action = none
slack_github.regex = "/https?:[^(]*\(([^)]*)\)/${color:blue}${re:1}${color:default}/ /(#[^(]*)\([^(]*\)/${color:blue}${re:1}${color:default}/ /\*([^*]*)\*/${re:1}/ /`([^`]*)`/${color:yellow}${re:1}${color:default}/"
slack_github.return_code = ok
slack_jira.arguments = "weechat_print"
slack_jira.command = ""
slack_jira.conditions = "${server} == omnilytics && ${tg_tag_nick} == JiraCloud"
slack_jira.enabled = on
slack_jira.hook = modifier
slack_jira.post_action = none
slack_jira.regex = "/https?:[^(]*\(([^)]*)\)/${color:blue}${re:1}${color:default}/ /slack:[^(]*\(([^)]*)\)/${re:1}/ /\*([^*]*)\*/${re:1}/ /Transition \| .*/.../"
slack_jira.return_code = ok
slack_mail.arguments = "weechat_print"
slack_mail.command = ""
slack_mail.conditions = "${server} == omnilytics"
slack_mail.enabled = on
slack_mail.hook = modifier
slack_mail.post_action = none
slack_mail.regex = "/mailto:[^(]* \(([^)]*)\)/${re:1}/"
slack_mail.return_code = ok
slack_postmark.arguments = "weechat_print"
slack_postmark.command = ""
slack_postmark.conditions = "${server} == omnilytics && ${tg_tag_nick} == PostmarkBot"
slack_postmark.enabled = on
slack_postmark.hook = modifier
slack_postmark.post_action = none
slack_postmark.regex = "/https?:[^(]*\(([^)]*)\)/${color:blue}${re:1}${color:default}/ /\*([^*]*)\*/${re:1}/ /_([^_]*)_/${re:1}/"
slack_postmark.return_code = ok
slack_sentry.arguments = "weechat_print"
slack_sentry.command = ""
slack_sentry.conditions = "${server} == omnilytics && ${tg_tag_nick} == Sentry"
slack_sentry.enabled = on
slack_sentry.hook = modifier
slack_sentry.post_action = none
slack_sentry.regex = "/https?:[^(]*\(([^)]*)\)/${color:blue}${re:1}${color:default}/"
slack_sentry.return_code = ok
slack_webhook.arguments = "weechat_print"
slack_webhook.command = ""
slack_webhook.conditions = "${server} == omnilytics && ${tg_tag_nick} == incoming-webhook && ${channel} == #dashboard"
slack_webhook.enabled = on
slack_webhook.hook = modifier
slack_webhook.post_action = none
slack_webhook.regex = "/https?:[^(]*\(([^)]*)\)/${color:blue}${re:1}${color:default}/ /`([^`]*)`/${color:yellow}${re:1}${color:default}/"
slack_webhook.return_code = ok
